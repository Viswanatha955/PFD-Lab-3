{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1gZ6I9rWBLMyi7H-yrxIFCPEM-oYSbXNB","authorship_tag":"ABX9TyOF6wr9W3x3F/6e81Mwi3IX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Task 1\n","\n","\n","Initialise an array with 12 random integer values from the interval [65 .. 75]. Visualise  the values. Consider these values as the average temperatures measured in Fahrenheit.  Store the values in a pandas Series. Set the indices of the pandas series as the full names  of the months. Convert the temperatures from Fahrenheit into Celsius. Use integer data  type. Visualise the series. Mode is the value that occurs most frequently in a dataset. By  using the function with the same name, determine the most common average monthly  temperature and print it on the screen. Print the number of months this average  temperature was recorded.\n"],"metadata":{"id":"OKKnLn3KqKKP"}},{"cell_type":"code","execution_count":2,"metadata":{"id":"0FdoNVgnqAQn","executionInfo":{"status":"ok","timestamp":1699026162422,"user_tz":0,"elapsed":741,"user":{"displayName":"Viswanatha Reddy","userId":"08691469022812996962"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import calendar"]},{"cell_type":"code","source":["#Visualise the values\n","Array= np.random.randint(65,75,12)\n","print(Array)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fyt-OFK-qV42","executionInfo":{"status":"ok","timestamp":1699025545590,"user_tz":0,"elapsed":242,"user":{"displayName":"Viswanatha Reddy","userId":"08691469022812996962"}},"outputId":"9b7107e0-2e61-4667-df7e-dc4f9785f9b3"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["[66 72 71 73 65 65 67 68 68 70 74 68]\n"]}]},{"cell_type":"code","source":["#Store the values in a pandas Series. Set the indices of the pandas series as the full  names of the months."],"metadata":{"id":"10ap73FerYDG","executionInfo":{"status":"ok","timestamp":1699025560050,"user_tz":0,"elapsed":222,"user":{"displayName":"Viswanatha Reddy","userId":"08691469022812996962"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["#Initialise an empty list\n","Months=[]\n","#Add the names of the list\n","for i in range(1,13):\n","  Months.append(calendar.month_name[i])\n","#Intialise the series\n","MySeries = pd.Series(data=Array,name='Temparature',index=Months)\n","for i in range(0,12):\n","  MySeries[i]=int((MySeries[i]-32)*(5/9))\n","  print(MySeries.to_string())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dtjy3ayNwXIr","executionInfo":{"status":"ok","timestamp":1699025560344,"user_tz":0,"elapsed":4,"user":{"displayName":"Viswanatha Reddy","userId":"08691469022812996962"}},"outputId":"7d1d2d21-c332-482a-d5e3-12ed385d5fe7"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["January      18\n","February     72\n","March        71\n","April        73\n","May          65\n","June         65\n","July         67\n","August       68\n","September    68\n","October      70\n","November     74\n","December     68\n","January      18\n","February     22\n","March        71\n","April        73\n","May          65\n","June         65\n","July         67\n","August       68\n","September    68\n","October      70\n","November     74\n","December     68\n","January      18\n","February     22\n","March        21\n","April        73\n","May          65\n","June         65\n","July         67\n","August       68\n","September    68\n","October      70\n","November     74\n","December     68\n","January      18\n","February     22\n","March        21\n","April        22\n","May          65\n","June         65\n","July         67\n","August       68\n","September    68\n","October      70\n","November     74\n","December     68\n","January      18\n","February     22\n","March        21\n","April        22\n","May          18\n","June         65\n","July         67\n","August       68\n","September    68\n","October      70\n","November     74\n","December     68\n","January      18\n","February     22\n","March        21\n","April        22\n","May          18\n","June         18\n","July         67\n","August       68\n","September    68\n","October      70\n","November     74\n","December     68\n","January      18\n","February     22\n","March        21\n","April        22\n","May          18\n","June         18\n","July         19\n","August       68\n","September    68\n","October      70\n","November     74\n","December     68\n","January      18\n","February     22\n","March        21\n","April        22\n","May          18\n","June         18\n","July         19\n","August       20\n","September    68\n","October      70\n","November     74\n","December     68\n","January      18\n","February     22\n","March        21\n","April        22\n","May          18\n","June         18\n","July         19\n","August       20\n","September    20\n","October      70\n","November     74\n","December     68\n","January      18\n","February     22\n","March        21\n","April        22\n","May          18\n","June         18\n","July         19\n","August       20\n","September    20\n","October      21\n","November     74\n","December     68\n","January      18\n","February     22\n","March        21\n","April        22\n","May          18\n","June         18\n","July         19\n","August       20\n","September    20\n","October      21\n","November     23\n","December     68\n","January      18\n","February     22\n","March        21\n","April        22\n","May          18\n","June         18\n","July         19\n","August       20\n","September    20\n","October      21\n","November     23\n","December     20\n"]}]},{"cell_type":"code","source":["# Extract the values from the data series and their occurrences\n","V = MySeries.value_counts()\n","print('Monthly average temperatures by number of occurrences')\n","print(V.to_string())\n","# Extract and print the monthly temperature with highest occurrence\n","temp = MySeries.mode()\n","print('The most common monthly temperature is: ', temp[0])\n","print('It occurred in ', V[temp[0]], ' months')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mbStOKBQy3Qj","executionInfo":{"status":"ok","timestamp":1699025923381,"user_tz":0,"elapsed":202,"user":{"displayName":"Viswanatha Reddy","userId":"08691469022812996962"}},"outputId":"ff378d46-b011-439a-93af-9838e1ac466d"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Monthly average temperatures by number of occurrences\n","18    3\n","20    3\n","22    2\n","21    2\n","19    1\n","23    1\n","The most common monthly temperature is:  18\n","It occurred in  3  months\n"]}]},{"cell_type":"markdown","source":["Task 2\n","1. Download the Dataset.csv, load its content into pandas data frame and visualise the  entire content of the data frame\n","Check the dataset for the following 'data cleaning' issues and resolve them: 2. Empty data\n","3. Unnecessary duplicates\n","4. Wrong formats\n","5. Wrong values\n","6. Save the new data set in a new CSV file\n","The house prices are at the focus of this dataset. By using the new data frame, provide  the following values which describe the column 'median_house_value': 7. Mean (average)\n","8. Median\n","9. Range, this is the difference between the maximum and the minimum values\n","10. The column 'median_income' is currency in tens of thousands USD. Convert it  into USD and visualise the entire new data frame.\n"],"metadata":{"id":"54WCB6QZ2B-e"}},{"cell_type":"code","source":["#1.\n","MyDataFrame=pd.read_csv('/content/drive/MyDrive/Greenwich /Term 1/Programming Fundamentals for Data Science/Lab 3 /Dataset.csv')\n","print(MyDataFrame.to_string())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p3X3wkXS1Ltx","executionInfo":{"status":"ok","timestamp":1699027283872,"user_tz":0,"elapsed":560,"user":{"displayName":"Viswanatha Reddy","userId":"08691469022812996962"}},"outputId":"16a5063a-62a5-4055-c44a-37562220f7e7"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["    longitude  latitude  housing_median_age  total_rooms  population  median_income  median_house_value ocean_proximity\n","0     -122.23     37.88             41.0000          880         322         8.3252              452600        NEAR BAY\n","1     -122.23     37.88             41.0000          880         322         8.3252              452600        NEAR BAY\n","2     -122.22     37.86             21.0000         7099        2401         8.3014              358500        NEAR BAY\n","3     -122.25     37.84             52.0001         3104        1157         3.1200              241400        NEAR BAY\n","4     -122.26     37.85             52.0000         3503        1504         3.2705              241800        NEAR BAY\n","5     -121.65     39.32             40.0000          812         374         2.7891               73500          INLAND\n","6     -121.69     39.36             29.0000         2220        1170         2.3224               56200          INLAND\n","7     -121.70     39.37             32.0000         1852         911         1.7885               57000          INLAND\n","8     -121.70     39.36             46.0000         1210         523         1.9100               63900          INLAND\n","9     -121.70     39.36             37.0000         2330        1505         2.0474               56000          INLAND\n","10    -121.69     39.36             34.0000          842         635         1.8355               63000          INLAND\n","11    -121.74     39.38             27.0000         2596        1100         2.3243               85500             NaN\n","12    -121.80     39.33             30.0000         1019         501         2.5259               81300          INLAND\n","13    -120.46     38.15             16.0000         4221        1516         2.3816              116000          INLAND\n","14    -120.55     38.12             10.0000         1566         785         2.5000              116100          INLAND\n","15    -120.56     38.09             34.0000         2745        1150         2.3654               94900          INLAND\n","16    -124.23     41.75             11.0000         3159        1343         2.4805               73200      NEAR OCEAN\n","17    -124.21     41.77             17.0000         3461        1947         2.5795               68400          NEAR O\n","18    -124.19     41.78             15.0000         3140        1645         1.6654               74600          NEAR O\n","19    -124.16     41.74             15.0000         2715        1532         2.1829               69500      NEAR OCEAN\n","20    -124.14     41.95             21.0000         2696        1208            NaN              122400      NEAR OCEAN\n","21    -124.16     41.92             19.0000         1668         841         2.1336               75000      NEAR OCEAN\n","22    -118.32     33.35             27.0000         1675         744         2.1579              450000          ISLAND\n","23    -118.33     33.34             52.0000         2359        1100         2.8333              414700          ISLAND\n","24    -118.32     33.33             52.0000         2127         733         3.3906              300000          ISLAND\n","25    -118.32     33.34             52.0000          996         341         2.7361              450000          ISLAND\n","26    -118.48     33.43             29.0000          716         422         2.6042              287500          ISLAND\n","27    -118.48     33.43             29.0000          716         422         2.6042              287500          ISLAND\n"]}]},{"cell_type":"code","source":["#2.\n","\n","# Print for rows with missing values\n","print(MyDataFrame[MyDataFrame.isnull().T.any()].to_string()) # Access individual cell\n","print(MyDataFrame.at[11, 'ocean_proximity'])\n","# In case of row 11, new value can be set by observing values # From columns 1 and 2 in rows 9 and 10\n","# Set new value to the empty cell\n","MyDataFrame.at[11, 'ocean_proximity'] = 'INLAND'\n","# In case of row 20, new value cannot be guessed\n","# Therefore, the entire row is removed\n","# This is an out-of-place operation\n","MyDataFrame1 = MyDataFrame.dropna()\n","# Print the new data frame\n","print(MyDataFrame1.to_string())\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XcPXh_XR2bLW","executionInfo":{"status":"ok","timestamp":1699027285789,"user_tz":0,"elapsed":7,"user":{"displayName":"Viswanatha Reddy","userId":"08691469022812996962"}},"outputId":"08d471aa-cb10-41f9-e3a4-8d1458e67ef9"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["    longitude  latitude  housing_median_age  total_rooms  population  median_income  median_house_value ocean_proximity\n","11    -121.74     39.38                27.0         2596        1100         2.3243               85500             NaN\n","20    -124.14     41.95                21.0         2696        1208            NaN              122400      NEAR OCEAN\n","nan\n","    longitude  latitude  housing_median_age  total_rooms  population  median_income  median_house_value ocean_proximity\n","0     -122.23     37.88             41.0000          880         322         8.3252              452600        NEAR BAY\n","1     -122.23     37.88             41.0000          880         322         8.3252              452600        NEAR BAY\n","2     -122.22     37.86             21.0000         7099        2401         8.3014              358500        NEAR BAY\n","3     -122.25     37.84             52.0001         3104        1157         3.1200              241400        NEAR BAY\n","4     -122.26     37.85             52.0000         3503        1504         3.2705              241800        NEAR BAY\n","5     -121.65     39.32             40.0000          812         374         2.7891               73500          INLAND\n","6     -121.69     39.36             29.0000         2220        1170         2.3224               56200          INLAND\n","7     -121.70     39.37             32.0000         1852         911         1.7885               57000          INLAND\n","8     -121.70     39.36             46.0000         1210         523         1.9100               63900          INLAND\n","9     -121.70     39.36             37.0000         2330        1505         2.0474               56000          INLAND\n","10    -121.69     39.36             34.0000          842         635         1.8355               63000          INLAND\n","11    -121.74     39.38             27.0000         2596        1100         2.3243               85500          INLAND\n","12    -121.80     39.33             30.0000         1019         501         2.5259               81300          INLAND\n","13    -120.46     38.15             16.0000         4221        1516         2.3816              116000          INLAND\n","14    -120.55     38.12             10.0000         1566         785         2.5000              116100          INLAND\n","15    -120.56     38.09             34.0000         2745        1150         2.3654               94900          INLAND\n","16    -124.23     41.75             11.0000         3159        1343         2.4805               73200      NEAR OCEAN\n","17    -124.21     41.77             17.0000         3461        1947         2.5795               68400          NEAR O\n","18    -124.19     41.78             15.0000         3140        1645         1.6654               74600          NEAR O\n","19    -124.16     41.74             15.0000         2715        1532         2.1829               69500      NEAR OCEAN\n","21    -124.16     41.92             19.0000         1668         841         2.1336               75000      NEAR OCEAN\n","22    -118.32     33.35             27.0000         1675         744         2.1579              450000          ISLAND\n","23    -118.33     33.34             52.0000         2359        1100         2.8333              414700          ISLAND\n","24    -118.32     33.33             52.0000         2127         733         3.3906              300000          ISLAND\n","25    -118.32     33.34             52.0000          996         341         2.7361              450000          ISLAND\n","26    -118.48     33.43             29.0000          716         422         2.6042              287500          ISLAND\n","27    -118.48     33.43             29.0000          716         422         2.6042              287500          ISLAND\n"]}]},{"cell_type":"code","source":["#3 Duplicate values\n","print(MyDataFrame1.duplicated())\n","#Remove duplicated\n","MyDataFrame2= MyDataFrame1.drop_duplicates()\n","#Print data frame\n","print(MyDataFrame2.to_string())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qz_X89b23ZX9","executionInfo":{"status":"ok","timestamp":1699027466691,"user_tz":0,"elapsed":3,"user":{"displayName":"Viswanatha Reddy","userId":"08691469022812996962"}},"outputId":"fb01c30c-37b6-4021-e29b-5a836e9e9b2a"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["0     False\n","1      True\n","2     False\n","3     False\n","4     False\n","5     False\n","6     False\n","7     False\n","8     False\n","9     False\n","10    False\n","11    False\n","12    False\n","13    False\n","14    False\n","15    False\n","16    False\n","17    False\n","18    False\n","19    False\n","21    False\n","22    False\n","23    False\n","24    False\n","25    False\n","26    False\n","27     True\n","dtype: bool\n","    longitude  latitude  housing_median_age  total_rooms  population  median_income  median_house_value ocean_proximity\n","0     -122.23     37.88             41.0000          880         322         8.3252              452600        NEAR BAY\n","2     -122.22     37.86             21.0000         7099        2401         8.3014              358500        NEAR BAY\n","3     -122.25     37.84             52.0001         3104        1157         3.1200              241400        NEAR BAY\n","4     -122.26     37.85             52.0000         3503        1504         3.2705              241800        NEAR BAY\n","5     -121.65     39.32             40.0000          812         374         2.7891               73500          INLAND\n","6     -121.69     39.36             29.0000         2220        1170         2.3224               56200          INLAND\n","7     -121.70     39.37             32.0000         1852         911         1.7885               57000          INLAND\n","8     -121.70     39.36             46.0000         1210         523         1.9100               63900          INLAND\n","9     -121.70     39.36             37.0000         2330        1505         2.0474               56000          INLAND\n","10    -121.69     39.36             34.0000          842         635         1.8355               63000          INLAND\n","11    -121.74     39.38             27.0000         2596        1100         2.3243               85500          INLAND\n","12    -121.80     39.33             30.0000         1019         501         2.5259               81300          INLAND\n","13    -120.46     38.15             16.0000         4221        1516         2.3816              116000          INLAND\n","14    -120.55     38.12             10.0000         1566         785         2.5000              116100          INLAND\n","15    -120.56     38.09             34.0000         2745        1150         2.3654               94900          INLAND\n","16    -124.23     41.75             11.0000         3159        1343         2.4805               73200      NEAR OCEAN\n","17    -124.21     41.77             17.0000         3461        1947         2.5795               68400          NEAR O\n","18    -124.19     41.78             15.0000         3140        1645         1.6654               74600          NEAR O\n","19    -124.16     41.74             15.0000         2715        1532         2.1829               69500      NEAR OCEAN\n","21    -124.16     41.92             19.0000         1668         841         2.1336               75000      NEAR OCEAN\n","22    -118.32     33.35             27.0000         1675         744         2.1579              450000          ISLAND\n","23    -118.33     33.34             52.0000         2359        1100         2.8333              414700          ISLAND\n","24    -118.32     33.33             52.0000         2127         733         3.3906              300000          ISLAND\n","25    -118.32     33.34             52.0000          996         341         2.7361              450000          ISLAND\n","26    -118.48     33.43             29.0000          716         422         2.6042              287500          ISLAND\n"]}]},{"cell_type":"code","source":["#4\n","# Row 3 displays house median age with 4 dp, which is unnecessary # Initialise integer variable Temp\n","# With the value from the corresponding cell\n","Temp = int(MyDataFrame2.at[3, 'housing_median_age']) # Set the cell value with the new integer variable\n","MyDataFrame2.at[3, 'housing_median_age'] = Temp\n","# Print the data frame\n","print(MyDataFrame2.to_string())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Be6FpOh57Q6-","executionInfo":{"status":"ok","timestamp":1699027518299,"user_tz":0,"elapsed":310,"user":{"displayName":"Viswanatha Reddy","userId":"08691469022812996962"}},"outputId":"85cb7565-3cc4-40b9-f60e-f8ea5453ed21"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["    longitude  latitude  housing_median_age  total_rooms  population  median_income  median_house_value ocean_proximity\n","0     -122.23     37.88                41.0          880         322         8.3252              452600        NEAR BAY\n","2     -122.22     37.86                21.0         7099        2401         8.3014              358500        NEAR BAY\n","3     -122.25     37.84                52.0         3104        1157         3.1200              241400        NEAR BAY\n","4     -122.26     37.85                52.0         3503        1504         3.2705              241800        NEAR BAY\n","5     -121.65     39.32                40.0          812         374         2.7891               73500          INLAND\n","6     -121.69     39.36                29.0         2220        1170         2.3224               56200          INLAND\n","7     -121.70     39.37                32.0         1852         911         1.7885               57000          INLAND\n","8     -121.70     39.36                46.0         1210         523         1.9100               63900          INLAND\n","9     -121.70     39.36                37.0         2330        1505         2.0474               56000          INLAND\n","10    -121.69     39.36                34.0          842         635         1.8355               63000          INLAND\n","11    -121.74     39.38                27.0         2596        1100         2.3243               85500          INLAND\n","12    -121.80     39.33                30.0         1019         501         2.5259               81300          INLAND\n","13    -120.46     38.15                16.0         4221        1516         2.3816              116000          INLAND\n","14    -120.55     38.12                10.0         1566         785         2.5000              116100          INLAND\n","15    -120.56     38.09                34.0         2745        1150         2.3654               94900          INLAND\n","16    -124.23     41.75                11.0         3159        1343         2.4805               73200      NEAR OCEAN\n","17    -124.21     41.77                17.0         3461        1947         2.5795               68400          NEAR O\n","18    -124.19     41.78                15.0         3140        1645         1.6654               74600          NEAR O\n","19    -124.16     41.74                15.0         2715        1532         2.1829               69500      NEAR OCEAN\n","21    -124.16     41.92                19.0         1668         841         2.1336               75000      NEAR OCEAN\n","22    -118.32     33.35                27.0         1675         744         2.1579              450000          ISLAND\n","23    -118.33     33.34                52.0         2359        1100         2.8333              414700          ISLAND\n","24    -118.32     33.33                52.0         2127         733         3.3906              300000          ISLAND\n","25    -118.32     33.34                52.0          996         341         2.7361              450000          ISLAND\n","26    -118.48     33.43                29.0          716         422         2.6042              287500          ISLAND\n"]}]},{"cell_type":"code","source":["#5\n","# Incorrect values for Ocean Proximity in Rows 17 and 18 # Initialise variable S with correct value from row 16\n","S = str(MyDataFrame2.at[16, 'ocean_proximity'])\n","# Print the value\n","print(S)\n","# Set the type for the column\n","MyDataFrame2['ocean_proximity'].apply(str)\n","# Assign the new correct value to the corresponding cells MyDataFrame2.at[17, 'ocean_proximity'] = S\n","MyDataFrame2.at[18, 'ocean_proximity'] = S\n","# Print the data frame\n","print(MyDataFrame2.to_string())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1UQmmNAB7n-L","executionInfo":{"status":"ok","timestamp":1699027559199,"user_tz":0,"elapsed":323,"user":{"displayName":"Viswanatha Reddy","userId":"08691469022812996962"}},"outputId":"dfc498ef-45cb-417f-a132-03d1b2c7b492"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["NEAR OCEAN\n","    longitude  latitude  housing_median_age  total_rooms  population  median_income  median_house_value ocean_proximity\n","0     -122.23     37.88                41.0          880         322         8.3252              452600        NEAR BAY\n","2     -122.22     37.86                21.0         7099        2401         8.3014              358500        NEAR BAY\n","3     -122.25     37.84                52.0         3104        1157         3.1200              241400        NEAR BAY\n","4     -122.26     37.85                52.0         3503        1504         3.2705              241800        NEAR BAY\n","5     -121.65     39.32                40.0          812         374         2.7891               73500          INLAND\n","6     -121.69     39.36                29.0         2220        1170         2.3224               56200          INLAND\n","7     -121.70     39.37                32.0         1852         911         1.7885               57000          INLAND\n","8     -121.70     39.36                46.0         1210         523         1.9100               63900          INLAND\n","9     -121.70     39.36                37.0         2330        1505         2.0474               56000          INLAND\n","10    -121.69     39.36                34.0          842         635         1.8355               63000          INLAND\n","11    -121.74     39.38                27.0         2596        1100         2.3243               85500          INLAND\n","12    -121.80     39.33                30.0         1019         501         2.5259               81300          INLAND\n","13    -120.46     38.15                16.0         4221        1516         2.3816              116000          INLAND\n","14    -120.55     38.12                10.0         1566         785         2.5000              116100          INLAND\n","15    -120.56     38.09                34.0         2745        1150         2.3654               94900          INLAND\n","16    -124.23     41.75                11.0         3159        1343         2.4805               73200      NEAR OCEAN\n","17    -124.21     41.77                17.0         3461        1947         2.5795               68400          NEAR O\n","18    -124.19     41.78                15.0         3140        1645         1.6654               74600      NEAR OCEAN\n","19    -124.16     41.74                15.0         2715        1532         2.1829               69500      NEAR OCEAN\n","21    -124.16     41.92                19.0         1668         841         2.1336               75000      NEAR OCEAN\n","22    -118.32     33.35                27.0         1675         744         2.1579              450000          ISLAND\n","23    -118.33     33.34                52.0         2359        1100         2.8333              414700          ISLAND\n","24    -118.32     33.33                52.0         2127         733         3.3906              300000          ISLAND\n","25    -118.32     33.34                52.0          996         341         2.7361              450000          ISLAND\n","26    -118.48     33.43                29.0          716         422         2.6042              287500          ISLAND\n"]}]},{"cell_type":"code","source":["MyDataFrame2.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FOCLlvhl8TNh","executionInfo":{"status":"ok","timestamp":1699027767886,"user_tz":0,"elapsed":458,"user":{"displayName":"Viswanatha Reddy","userId":"08691469022812996962"}},"outputId":"8404323c-fec7-48da-d71c-3ab5070024a5"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 25 entries, 0 to 26\n","Data columns (total 8 columns):\n"," #   Column              Non-Null Count  Dtype  \n","---  ------              --------------  -----  \n"," 0   longitude           25 non-null     float64\n"," 1   latitude            25 non-null     float64\n"," 2   housing_median_age  25 non-null     float64\n"," 3   total_rooms         25 non-null     int64  \n"," 4   population          25 non-null     int64  \n"," 5   median_income       25 non-null     float64\n"," 6   median_house_value  25 non-null     int64  \n"," 7   ocean_proximity     25 non-null     object \n","dtypes: float64(4), int64(3), object(1)\n","memory usage: 2.3+ KB\n"]}]},{"cell_type":"code","source":["MyDataFrame2.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"HraYaZ_18bI_","executionInfo":{"status":"ok","timestamp":1699027784992,"user_tz":0,"elapsed":248,"user":{"displayName":"Viswanatha Reddy","userId":"08691469022812996962"}},"outputId":"047495ed-3bcf-44d5-e55f-137912d187ba"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        longitude   latitude  housing_median_age  total_rooms   population  \\\n","count   25.000000  25.000000           25.000000    25.000000    25.000000   \n","mean  -121.476800  38.255200           31.600000  2320.600000  1048.080000   \n","std      1.948276   2.834719           14.017846  1399.672372   537.579213   \n","min   -124.230000  33.330000           10.000000   716.000000   322.000000   \n","25%   -122.250000  37.850000           19.000000  1210.000000   635.000000   \n","50%   -121.700000  39.320000           30.000000  2220.000000  1100.000000   \n","75%   -120.550000  39.370000           41.000000  3104.000000  1504.000000   \n","max   -118.320000  41.920000           52.000000  7099.000000  2401.000000   \n","\n","       median_income  median_house_value  \n","count      25.000000           25.000000  \n","mean        2.902848       176824.000000  \n","std         1.685917       146769.468555  \n","min         1.665400        56000.000000  \n","25%         2.157900        69500.000000  \n","50%         2.480500        85500.000000  \n","75%         2.789100       287500.000000  \n","max         8.325200       452600.000000  "],"text/html":["\n","  <div id=\"df-fb9588ae-8bec-4427-b293-5cf38c19c944\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>longitude</th>\n","      <th>latitude</th>\n","      <th>housing_median_age</th>\n","      <th>total_rooms</th>\n","      <th>population</th>\n","      <th>median_income</th>\n","      <th>median_house_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>25.000000</td>\n","      <td>25.000000</td>\n","      <td>25.000000</td>\n","      <td>25.000000</td>\n","      <td>25.000000</td>\n","      <td>25.000000</td>\n","      <td>25.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>-121.476800</td>\n","      <td>38.255200</td>\n","      <td>31.600000</td>\n","      <td>2320.600000</td>\n","      <td>1048.080000</td>\n","      <td>2.902848</td>\n","      <td>176824.000000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.948276</td>\n","      <td>2.834719</td>\n","      <td>14.017846</td>\n","      <td>1399.672372</td>\n","      <td>537.579213</td>\n","      <td>1.685917</td>\n","      <td>146769.468555</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-124.230000</td>\n","      <td>33.330000</td>\n","      <td>10.000000</td>\n","      <td>716.000000</td>\n","      <td>322.000000</td>\n","      <td>1.665400</td>\n","      <td>56000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>-122.250000</td>\n","      <td>37.850000</td>\n","      <td>19.000000</td>\n","      <td>1210.000000</td>\n","      <td>635.000000</td>\n","      <td>2.157900</td>\n","      <td>69500.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>-121.700000</td>\n","      <td>39.320000</td>\n","      <td>30.000000</td>\n","      <td>2220.000000</td>\n","      <td>1100.000000</td>\n","      <td>2.480500</td>\n","      <td>85500.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>-120.550000</td>\n","      <td>39.370000</td>\n","      <td>41.000000</td>\n","      <td>3104.000000</td>\n","      <td>1504.000000</td>\n","      <td>2.789100</td>\n","      <td>287500.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>-118.320000</td>\n","      <td>41.920000</td>\n","      <td>52.000000</td>\n","      <td>7099.000000</td>\n","      <td>2401.000000</td>\n","      <td>8.325200</td>\n","      <td>452600.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb9588ae-8bec-4427-b293-5cf38c19c944')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fb9588ae-8bec-4427-b293-5cf38c19c944 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fb9588ae-8bec-4427-b293-5cf38c19c944');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-23b69e53-7298-475c-af1f-7fdb12267938\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-23b69e53-7298-475c-af1f-7fdb12267938')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-23b69e53-7298-475c-af1f-7fdb12267938 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":[],"metadata":{"id":"XPoEMZmC8a8H"},"execution_count":null,"outputs":[]}]}